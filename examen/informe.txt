Examen de prácticas primera oportunidad Algoritmos

18/1/2024

Autor:

    Alexandre Borrazás Mancebo  : alexandre.bmancebo@udc.es

Características de la máquina:

    Modelo      : ROG Strix G513RM_G513RM 1.0 
    Memoria     : 15233MiB
    Procesador  : AMD Ryzen 7 6800H with Radeon Graphics (16) @ 4.785GHz
    GPU0        : NVIDIA GeForce RTX 3060 Mobile / Max-Q 
    GPU1        : AMD ATI Radeon 680M
    Kernel      : 6.5.0-14-generic
    Tipo de SO  : Ubuntu 23.10 x86_64
    Disco       : nvme gen4 1TB
    Compilador  : gcc (Ubuntu 13.2.0-4ubuntu3) 13.2.0

Introducción:

    En el contexto de la ordenación de vectores de números enteros, en este estudio analizare la complejidad de la 
    ordenación Quicksort. 
    
    Con el objetivo de determinar su complejidad empíricamente, para 3 casos de entrada.
    El objetivo de estás estás pruebas es estudiar la complejidad de la ordenación Quicksort.

Método: 
    
    Se determinarán los tiempos de ejecución del algoritmo con 3 vectores de entrada diferentes: 
        -Vector ordenado de manera ascendente.
        -Vector ordenado de manera descendente.
        -Vector inicialmente desordenado (generado pseudoaleatoriamente).
    
    Para el cáculo empirico de la complejidad se usarán 2 cotas (subestimada y sobreestimada) para afianzar los resultados 
    de la cota ajustada.

    En el caso que el tiempo de ejecución sea inferior a 500 se calculará una media de K (K = 1000) ejecuciones del algoritmo.
    Esto se indicará en las tablas con el símbolo (*).

    Todas las unidades de tiempo están medidas en microsegundos (µs).

Tablas de la ordenación Qsort:

    Ordenacion por quicksort con inicializacion ascendente:
    ____________[N]__________[t(n)]_________[t(n)/n^1.8]____________[t(n)/n^2.0]_________[t(n)/n^2.2]___
    (*)         500   |        56.644<- |    0.000785249930   |    0.000226576000   |    0.000065376235
    (*)        1000   |       224.238   |    0.000892707557   |    0.000224238000   |    0.000056326039
               2000   |       885.000   |    0.001011787427   |    0.000221250000   |    0.000048381272
               4000   |      3511.000   |    0.001152717390   |    0.000219437500   |    0.000041773306
               8000   |     13987.000   |    0.001318750382   |    0.000218546875   |    0.000036218178
              16000   |     55972.000   |    0.001515496217   |    0.000218640625   |    0.000031543281
              32000   |    220109.000   |    0.001711464281   |    0.000214950195   |    0.000026996524
              64000   |    872975.000   |    0.001949296278   |    0.000213128662   |    0.000023302680

    (*)  Tiempo promedio en 1000 ejecuciones del algoritmo
    <- Mediación anómala
    
    Cota subestimada = n^1.8
    Cota ajustada = n^2.0
    Cota sobrestimada = n^2.2

    Observaciones:
    El cociente entre nuestros tiempos y la cota subestimada es estrictamente creciente.
    El cociente entre nuestros tiempos y la cota sobrestimada es estrictamente decreciente.
    El cociente entre nuestros tiempos y la cota ajustada se sitúa próximo a un valor estable de 0.00021.

    Ordenacion por quicksort con inicializacion descendente:
    ____________[N]__________[t(n)]_________[t(n)/n^1.8]____________[t(n)/n^2.0]_________[t(n)/n^2.2]___
    (*)         500   |        97.512<- |    0.001351798799   |    0.000390048000   |    0.000112544443
    (*)        1000   |       373.217<- |    0.001485803639   |    0.000373217000   |    0.000093747872
               2000   |      1462.000   |    0.001671449965   |    0.000365500000   |    0.000079924768
               4000   |      5754.000   |    0.001889130123   |    0.000359625000   |    0.000068460155
               8000   |     23023.000   |    0.002170700653   |    0.000359734375   |    0.000059616152
              16000   |     91606.000   |    0.002480321348   |    0.000357835938   |    0.000051624987
              32000   |    365416.000   |    0.002841303317   |    0.000356851563   |    0.000044818530
              64000   |   1459198.000   |    0.003258294029   |    0.000356249512   |    0.000038950970
    
    (*)  Tiempo promedio en 1000 ejecuciones del algoritmo
    <- Mediación anómala
    
    Cota subestimada = n^1.8
    Cota ajustada = n^2.0
    Cota sobrestimada = n^2.2

    Observaciones:
    El cociente entre nuestros tiempos y la cota subestimada es estrictamente creciente.
    El cociente entre nuestros tiempos y la cota sobrestimada es estrictamente decreciente.
    El cociente entre nuestros tiempos y la cota ajustada se sitúa próximo a un valor estable de 0.00035.


    Ordenacion por quicksort con inicializacion aleatoria:
    ____________[N]__________[t(n)]___________[t(n)/n]______________[t(n)/n^1.11]________[t(n)/n^1.3]___
    (*)         500   |        26.179   |    0.052358000000   |    0.026429950411   |    0.008115065835
    (*)        1000   |        57.445   |    0.057445000000   |    0.026869045191   |    0.007231897028
    (*)        2000   |       123.558   |    0.061779000000   |    0.026774882565   |    0.006317305441
    (*)        4000   |       265.974   |    0.066493500000   |    0.026702541232   |    0.005522823905
               8000   |       587.000   |    0.073375000000   |    0.027302864621   |    0.004950181447
              16000   |      1286.000<- |    0.080375000000   |    0.027711994736   |    0.004404382122
              32000   |      2645.000   |    0.082656250000   |    0.026406400171   |    0.003679007766
              64000   |      5462.000<- |    0.085343750000   |    0.025263407346   |    0.003085444434

    (*)  Tiempo promedio en 1000 ejecuciones del algoritmo
    <- Mediación anómala
    
    Cota subestimada = n
    Cota ajustada = n^1.11
    Cota sobrestimada = n^1.3

    Observaciones:
    El cociente entre nuestros tiempos y la cota subestimada es estrictamente creciente.
    El cociente entre nuestros tiempos y la cota sobrestimada es estrictamente decreciente.
    El cociente entre nuestros tiempos y la cota ajustada se sitúa próximo a un valor estable de 0.00026.

   Conclusión:
   
   Esta implementación de Quicksort, es un algoritmo muy eficiente para vectores aleatorios, en nuestras pruebas nos presenta 
   un complejidad muy a O(logn). Por otro lado el caso de ascendente y descendente nos presenta una complejidad cuadrática. 

   En cualquiera de los 3 casos, se podría mejorar la compplejidad con una implementación de un umbral el cual al llegar a el, 
   pasariamos esos vectores casi ordenados a insersión, el cual es relativamente eficiente estos ultimos.

   Otro cambio interesante de estudiarsería la implementación de un pivote aleario.
   
   En conclusión, estña implementación de Quicksort es un algoritmo muy eficiente para vectores aleatorios.